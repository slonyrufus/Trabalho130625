@model HospitalVidaPlenaHOSPISIM.Models.ProfissionalSaude

@{
    ViewBag.Title = "Editar profissional de saude";
    Layout = null;
}

<head>
    <title>Hospital Vida Plena HOSPISIM - @ViewBag.Title</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <style>
        *,
        *::before,
        *::after {
            box-sizing: border-box;
        }

        .form-container {
            background: white;
            border-radius: 16px;
            padding: 24px;
            box-shadow: 0 8px 20px rgb(0 0 0 / 0.1);
            max-width: 700px;
            margin: 40px auto;
        }

        .form-group {
            margin-bottom: 16px;
        }

        .form-group label {
            font-weight: 600;
            margin-bottom: 6px;
            display: block;
        }

        .form-group input,
        .form-group select,
        .form-group textarea {
            width: 100%;
            padding: 12px;
            border: 1px solid #cbd5e1;
            border-radius: 8px;
        }

        .form-actions {
            display: flex;
            justify-content: space-between;
            margin-top: 20px;
        }

        body {
            margin: 0;
            font-family: 'Inter', sans-serif;
            background: #f4f7fb;
            color: #1e293b;
            line-height: 1.6;
            min-height: 100vh;
            display: grid;
            grid-template-areas:
                "header header"
                "sidebar main";
            grid-template-columns: 280px 1fr;
            grid-template-rows: 60px 1fr;
            transition: grid-template-columns 0.3s ease;
            min-height: 100vh;
        }

        a {
            color: inherit;
            text-decoration: none;
            cursor: pointer;
        }

        a:focus,
        button:focus {
            outline: 2px solid #2563eb;
            outline-offset: 2px;
        }

        header {
            grid-area: header;
            background: #2563eb;
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 0 24px;
            color: #f1f5f9;
            font-weight: 600;
            font-size: 1.25rem;
            position: sticky;
            top: 0;
            z-index: 1000;
            box-shadow: 0 2px 8px rgb(0 0 0 / 0.15);
        }

        h1 {
            margin-top: 0;
            color: #2563eb;
            font-weight: 700;
            font-size: 2rem;
            margin-bottom: 24px;
        }

        .logo {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .logo-icon {
            font-size: 28px;
            color: #fbbf24;
        }

        .logo-text {
            letter-spacing: 1.2px;
        }

        .btn-primary {
            background: #2563eb;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            font-size: 16px;
            cursor: pointer;
        }

        .hamburger {
            background: none;
            border: none;
            color: #f1f5f9;
            font-size: 32px;
            display: none;
            cursor: pointer;
        }

        nav.sidebar {
            grid-area: sidebar;
            background: #1e293b;
            color: #cbd5e1;
            display: flex;
            flex-direction: column;
            padding-top: 24px;
            padding-bottom: 24px;
            transition: transform 0.3s ease, width 0.3s ease;
            overflow-y: auto;
            box-shadow: inset -1px 0 0 rgba(255 255 255 / 0.1);
        }

        nav.sidebar.collapsed {
            width: 80px;
        }

        nav.sidebar ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        nav.sidebar li {
            margin: 0 16px 8px 16px;
        }

        nav.sidebar li:last-child {
            margin-bottom: 0;
        }

        nav.sidebar a {
            display: flex;
            align-items: center;
            gap: 16px;
            padding: 12px 16px;
            border-radius: 12px;
            transition: background-color 0.3s ease;
            font-weight: 500;
            color: #cbd5e1;
        }

        nav.sidebar a:hover,
        nav.sidebar a:focus {
            background: #2563eb;
            color: #e0e7ff;
        }

        nav.sidebar a .material-icons {
            font-size: 24px;
            flex-shrink: 0;
            color: inherit;
        }

        nav.sidebar.collapsed a span.label {
            display: none;
        }

        main {
            grid-area: main;
            padding: 32px 48px;
            max-width: 960px;
            margin: 0 auto;
        }

        main h1 {
            font-size: 2.5rem;
            margin-bottom: 16px;
            color: #1e293b;
        }

        main p {
            font-size: 1.125rem;
            margin-bottom: 32px;
            color: #475569;
        }

        .cards {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(230px, 1fr));
            gap: 24px;
        }

        .card {
            background: white;
            border-radius: 16px;
            padding: 24px 32px;
            box-shadow: 0 8px 20px rgb(0 0 0 / 0.05);
            text-align: center;
            transition: box-shadow 0.3s ease, transform 0.3s ease;
            cursor: pointer;
            user-select: none;
        }

        .card:hover,
        .card:focus-within {
            box-shadow: 0 16px 30px rgb(37 99 235 / 0.3);
            transform: translateY(-6px);
        }

        .card a {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 16px;
            color: #1e293b;
        }

        .card-icon {
            font-size: 48px;
            color: #2563eb;
            transition: color 0.3s ease;
        }

        .card a:hover .card-icon {
            color: #1d4ed8;
        }

        .card-label {
            font-weight: 600;
            font-size: 1.125rem;
        }

        nav.sidebar::-webkit-scrollbar {
            width: 8px;
        }

        nav.sidebar::-webkit-scrollbar-thumb {
            background: rgba(37, 99, 235, 0.4);
            border-radius: 4px;
        }

        .sr-only {
            position: absolute !important;
            width: 1px !important;
            height: 1px !important;
            padding: 0 !important;
            overflow: hidden !important;
            clip: rect(0, 0, 0, 0) !important;
            white-space: nowrap !important;
            border: 0 !important;
        }
    </style>
</head>
<header>
    <div class="logo" tabindex="0">
        <span class="material-icons logo-icon" aria-hidden="true">local_hospital</span>
        <span class="logo-text">Sistema Hospitalar</span>
    </div>
    <button class="hamburger" aria-label="Abrir menu de navegação" aria-controls="sidebar" aria-expanded="false"
        id="hamburgerButton">
        <span class="material-icons">menu</span>
    </button>
</header>
<nav class="sidebar" id="sidebar" aria-label="Menu principal de navegação">
    <ul>
        <li>
            <a href="/Home/Index" tabindex="0">
                <span class="material-icons" aria-hidden="true">home</span>
                <span class="label">Página Inicial</span>
            </a>
        </li>
        <li>
            <a href="/Paciente/Index" tabindex="0">
                <span class="material-icons" aria-hidden="true">people</span>
                <span class="label">Pacientes</span>
            </a>
        </li>
        <li>
            <a href="/ProfissionalSaude/Index" tabindex="0">
                <span class="material-icons" aria-hidden="true">medical_services</span>
                <span class="label">Profissionais de Saúde</span>
            </a>
        </li>
        <li>
            <a href="/Atendimento/Index" tabindex="0">
                <span class="material-icons" aria-hidden="true">event_note</span>
                <span class="label">Atendimentos</span>
            </a>
        </li>
        <li>
            <a href="/Internacao/Index" tabindex="0">
                <span class="material-icons" aria-hidden="true">hotel</span>
                <span class="label">Internações</span>
            </a>
        </li>
        <li>
            <a href="/Exame/Index" tabindex="0">
                <span class="material-icons" aria-hidden="true">science</span>
                <span class="label">Exames</span>
            </a>
        </li>
        <li>
            <a href="/Prescricao/Index" tabindex="0">
                <span class="material-icons" aria-hidden="true">receipt_long</span>
                <span class="label">Prescrições</span>
            </a>
        </li>
        <li>
            <a href="/AltaHospitalar/Index" tabindex="0">
                <span class="material-icons" aria-hidden="true">assignment_turned_in</span>
                <span class="label">Altas Hospitalares</span>
            </a>
        </li>
        <li>
            <a href="/Prontuario/Index" tabindex="0">
                <span class="material-icons" aria-hidden="true">folder_shared</span>
                <span class="label">Prontuários</span>
            </a>
        </li>
    </ul>
</nav>

<div class="form-container">
    <h1>Editar Profissional de Saúde</h1>
    @using (Html.BeginForm("Edit", "ProfissionalSaude", FormMethod.Post, new { @id = "paciente-form" }))
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(m => m.Id)

        <div class="form-group">
            @Html.LabelFor(m => m.NomeCompleto)
            @Html.TextBoxFor(m => m.NomeCompleto, new { @class = "form-control", required = "required", aria_required = "true" })
            @Html.ValidationMessageFor(m => m.NomeCompleto, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.CPF)
            @Html.TextBoxFor(m => m.CPF, new { @class = "form-control", required = "required", placeholder = "000.000.000-00", aria_required = "true" })
            @Html.ValidationMessageFor(m => m.CPF, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.Email)
            @Html.TextBoxFor(m => m.Email, new { @class = "form-control", type = "email", required = "required", aria_required = "true" })
            @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.Telefone)
            @Html.TextBoxFor(m => m.Telefone, new { @class = "form-control", placeholder = "(00) 00000-0000", required = "required", aria_required = "true" })
            @Html.ValidationMessageFor(m => m.Telefone, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.RegistroConselho)
            @Html.TextBoxFor(m => m.RegistroConselho, new { @class = "form-control", required = "required", aria_required = "true" })
            @Html.ValidationMessageFor(m => m.RegistroConselho, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.TipoRegistro)
            @Html.TextBoxFor(m => m.TipoRegistro, new { @class = "form-control", placeholder = "CRM, COREN, etc.", required = "required", aria_required = "true" })
            @Html.ValidationMessageFor(m => m.TipoRegistro, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.EspecialidadeId, "Especialidade")
            @Html.DropDownListFor(m => m.EspecialidadeId,
                (SelectList)ViewBag.Especialidades,
                "Selecione a especialidade",
                new { @class = "form-control", required = "required", aria_required = "true" })
            @Html.ValidationMessageFor(m => m.EspecialidadeId, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.DataAdmissao, "Data de Admissão")
            @Html.TextBoxFor(m => m.DataAdmissao,
                "{0:yyyy-MM-dd}",
                new { @type = "date", @class = "form-control", required = "required", aria_required = "true" })
            @Html.ValidationMessageFor(m => m.DataAdmissao, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.CargaHorariaSemanal, "Carga Horária Semanal (h)")
            @Html.TextBoxFor(m => m.CargaHorariaSemanal, new { @class = "form-control", type = "number", min = "0", required = "required", aria_required = "true" })
            @Html.ValidationMessageFor(m => m.CargaHorariaSemanal, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.Turno)
            @Html.TextBoxFor(m => m.Turno, new { @class = "form-control", placeholder = "Ex: Manhã, Tarde, Noite", required = "required", aria_required = "true" })
            @Html.ValidationMessageFor(m => m.Turno, "", new { @class = "text-danger" })
        </div>

        <div class="form-group form-check">
            <label class="form-check-label">
                @Html.CheckBoxFor(m => m.Ativo, new { @class = "form-check-input" }) Ativo
            </label>
        </div>

        <div class="form-actions">
            <button type="submit" class="btn btn-primary" aria-label="Salvar alterações do profissional">Salvar</button>
            @Html.ActionLink("Cancelar", "Index", null, new { @class = "btn btn-secondary", id = "cancelar", aria_label = "Cancelar edição" })
        </div>
    }
</div>
<script>
    let form = document.getElementById('exame-form');
    let toast = document.getElementById('toast');
    let cancelarBtn = document.getElementById('cancelar');
    let lastUrl = window.location.pathname.split("/").filter(e => e.length > 0);
    lastUrl.pop();
    form.addEventListener('submit', event => {
        if (!form.checkValidity()) {
            event.preventDefault();
            form.reportValidity();
            return;
        }
        toast.classList.add('show');
        setTimeout(() => {
            toast.classList.remove('show');
            window.location.href = "/" + lastUrl.join("/");
        }, 5000);
    });

    cancelarBtn.addEventListener("click", event => {
        event.preventDefault();
        window.location.href = "/" + lastUrl.join("/");
    });
</script>